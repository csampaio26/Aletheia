using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Spectralizer
{
    public static class ProjectConfig
    {
        const string registry_key = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall";

        // Delete coverage information generated by OpenCppCoverage from output directory
        public static void DeleteAnalData(string workingDir)
        {

            string[] dirs = Directory.GetDirectories(workingDir);

            foreach (string s in dirs)
            {
                Directory.Delete(s, true);
            }
            Console.WriteLine("Coverage files are deleted!");
        }

        public static string GetInstalledProgramPath(string programName)
        {
            List<string> result = new List<string>();
            result.AddRange(GetInstalledProgramsFromRegistry(RegistryView.Registry32));
            result.AddRange(GetInstalledProgramsFromRegistry(RegistryView.Registry64));

            foreach (string s in result)
            {
                if (s != null)
                {
                    if (s.Contains(programName))
                        return s + programName + ".exe";
                }
            }
            return null;
        }

        private static IEnumerable<string> GetInstalledProgramsFromRegistry(RegistryView registryView)
        {
            var result = new List<string>();

            using (RegistryKey key = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, registryView).OpenSubKey(registry_key))
            {
                foreach (string subkey_name in key.GetSubKeyNames())
                {
                    using (RegistryKey subkey = key.OpenSubKey(subkey_name))
                    {
                        if (IsProgramVisible(subkey))
                        {
                            result.Add((string)subkey.GetValue("InstallLocation"));
                        }
                    }
                }
            }

            return result;
        }

        private static bool IsProgramVisible(RegistryKey subkey)
        {
            var name = (string)subkey.GetValue("DisplayName");
            var releaseType = (string)subkey.GetValue("ReleaseType");
            var systemComponent = subkey.GetValue("SystemComponent");
            var parentName = (string)subkey.GetValue("ParentDisplayName");

            return
                !string.IsNullOrEmpty(name)
                && string.IsNullOrEmpty(releaseType)
                && string.IsNullOrEmpty(parentName)
                && (systemComponent == null);
        }

        public static void help()
        {
            Console.WriteLine("spectralizer project_path=.../.../test.vcxproj\n");
            Console.WriteLine("             project_name=\n");
            Console.WriteLine("             source_directory=\n");
            Console.WriteLine("             output_directory=\n");
            Console.WriteLine("             [visualcoverage= ] true: to see the coverage information, false: to delete coverage information, default:false\n");
            Console.WriteLine("             [degreeofparallelism= ] number of threads, default: 12\n");
            Console.WriteLine("             [exectimeout= ] execution timeout for a single test in minutes, default=5\n");
            Console.WriteLine("             [coveragelevel= ] level of slicing the code, fct: function, loc: statement, default=fct\n");
            Console.WriteLine("             [functionHitSpectraMatrix= ] true: build FunctionHitSpectraMatrix, default=false\n");
            Console.WriteLine("             [invokedFunctionsHitSpectraMatrix= ] true: build InvokedFunctionsHitSpectraMatrix, default=false\n");
            Console.WriteLine("             [invokedFunctionsWithParametersHitSpectraMatrix= ] true: build InvokedFunctionsWithParametersHitSpectraMatrix, default=false\n");
            Console.WriteLine("             [countingFunctionInvokationsHitSpectraMatrix= ] true: build CountingFunctionInvokationsHitSpectraMatrix, default=false\n");
            Console.WriteLine("             [lineCoverageHitSpectraMatrix= ] true: build LineCoverageHitSpectraMatrix, default=false\n");
        }
    }
}
